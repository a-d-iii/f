---
import Base from '../../layouts/Base.astro';
import RatingWidget from '../../components/RatingWidget.tsx';
import { fetchLists } from '../../utils/supabase';
export async function getStaticPaths() {
  const faculty = await fetchLists();
  return faculty.map((f) => ({ params: { id: String(f.id) } }));
}
const { id } = Astro.params;
const faculty = await fetchLists();
const person = faculty.find((f) => String(f.id) === String(id));
if (!person) throw Astro.redirect('/', 302);
const photoUrl = person.photo_url || person.photo;
const specialization =
  person.specialization ||
  person.specialisation ||
  person.specializations ||
  person.dept ||
  person.department;
---
<Base title={`${person.name} - Faculty Ranker`} headerTitle={person.name}>
  <div class="flex flex-col md:flex-row md:items-start md:gap-8 items-center">
    <img
      src={photoUrl}
      alt={`Photo of ${person.name}`}
      onerror="this.src='https://placehold.co/300x400?text=No+Photo';this.onerror=null;"

      class="h-64 w-auto faculty-photo mb-4 md:mb-0"

    />
    <div class="flex flex-col items-center md:items-start">
      {specialization && (
        <p class="clamp-three-lines text-xs text-gray-600 dark:text-gray-400 mb-2 md:self-start text-center md:text-left">
          {specialization}
        </p>
      )}
      <div class="grid grid-cols-3 gap-2 mb-2 w-full text-center">
        <div class="p-2 rounded-lg bg-gray-200 dark:bg-gray-700 flex flex-col items-center gap-1 shadow">
          <RatingWidget rating={person.teaching_rating} client:load />
          <span class="text-xs font-medium">Teaching</span>
        </div>
        <div class="p-2 rounded-lg bg-gray-200 dark:bg-gray-700 flex flex-col items-center gap-1 shadow">
          <RatingWidget rating={person.attendance_rating} client:load />
          <span class="text-xs font-medium">Attendance</span>
        </div>
        <div class="p-2 rounded-lg bg-gray-200 dark:bg-gray-700 flex flex-col items-center gap-1 shadow">
          <RatingWidget rating={person.correction_rating} client:load />
          <span class="text-xs font-medium">Correction</span>
        </div>
      </div>
      <p class="mt-1 mb-2 text-sm text-gray-500 dark:text-gray-400 self-start">Rated by {person.total_ratings} student{person.total_ratings === 1 ? '' : 's'}</p>
 
      <form class="mt-4 flex flex-col items-center gap-4 w-full" onsubmit="event.preventDefault(); alert('Thanks for rating!');">
        <div class="relative flex items-center gap-2">
          <label for="teach" class="text-sm w-24">Teaching</label>
          <input id="teach" type="range" min="1" max="5" step="0.1" class="rating-slider w-48" />
          <span class="rating-value text-sm w-8 text-right"></span>
        </div>
        <div class="relative flex items-center gap-2">
          <label for="attend" class="text-sm w-24">Attendance</label>
          <input id="attend" type="range" min="1" max="5" step="0.1" class="rating-slider w-48" />
          <span class="rating-value text-sm w-8 text-right"></span>
        </div>
        <div class="relative flex items-center gap-2">
          <label for="corr" class="text-sm w-24">Correction</label>
          <input id="corr" type="range" min="1" max="5" step="0.1" class="rating-slider w-48" />
          <span class="rating-value text-sm w-8 text-right"></span>
        </div>
        <button type="submit" class="mt-2 px-4 py-1 rounded-lg bg-black text-white hover:bg-gray-800 self-start">Submit Rating</button>
      </form>
    </div>
  </div>
</Base>
